@using FluentValidation
@using MintStores.Core
@using MintStores.Core.Model
@inject IBaseService<Product> _baseProductService
@inject IBaseService<Brand> _baseBrandService
@inject IBaseService<Category> _baseCategoryService
@inject IValidator<Product> ProductValidator

<div class="modal fade show d-block bg-white bg-opacity-50">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success" style="height: 50px;">
                <h2 class="modal-title text-center ms-0">Create new product</h2>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="product" OnValidSubmit="SaveProduct">
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="ProductName">Product Name:</label>
                        <InputText class="form-control" id="ProductName" @bind-Value="product.ProductName" />
                        <ValidationMessage For="@(() => product.ProductName)" />
                        @if (string.IsNullOrWhiteSpace(product.ProductName))
                        {
                            <div class="text-danger">Product name is required.</div>
                        }
                    </div>

                    <div class="form-group">
                        <label for="Price">Price:</label>
                        <InputNumber class="form-control" id="Price" @bind-Value="product.Price" />
                        @if (product.Price <= 0)
                        {
                            <div class="text-danger">Price must be greater than 0.</div>
                        }
                    </div>

                    <div class="form-group">
                        <label for="ModelYear">Model Year:</label>
                        <InputNumber class="form-control" id="ModelYear" @bind-Value="product.ModelYear" />
                        @if (product.ModelYear <= 0)
                        {
                            <div class="text-danger">Model year must be greater than 0.</div>
                        }
                    </div>

                    <div class="form-group">
                        <label for="BrandId">Brand:</label>
                        <select class="form-control" id="BrandId" @bind="product.BrandId">
                            @foreach (var brand in brands)
                            {
                                <option value="@brand.BrandId">@brand.BrandName</option>
                            }
                        </select>
                        @if (product.BrandId == null)
                        {
                            <div class="text-danger"> You need select brand.</div>
                        }
                        <ValidationMessage For="@(() => product.BrandId)" />
                    </div>

                    <div class="form-group">
                        <label for="CategoryId">Category:</label>
                        <select class="form-control" id="CategoryId" @bind="product.CategoryId">
                            @foreach (var category in categories)
                            {
                                <option value="@category.CategoryId">@category.CategoryName</option>
                            }
                        </select>
                        @if (product.CategoryId == null)
                        {
                            <div class="text-danger"> You need select category .</div>
                        }
                        <ValidationMessage For="@(() => product.CategoryId)" />
                    </div>

                    <div class="modal-footer d-flex justify-content-center" style="height: 60px;">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        <button type="submit" class="btn btn-success">Create</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private Product product;
    private IEnumerable<Brand> brands;
    private IEnumerable<Category> categories;

    [Parameter] public bool IsOpenCreate { get; set; }
    [Parameter] public EventCallback<bool> IsOpenCreateChanged { get; set; }
    [Parameter] public EventCallback<bool> OnProductInitialized { get; set; }

    protected override void OnInitialized()
    {
        brands = _baseBrandService.GetAllItems().ToList();
        categories = _baseCategoryService.GetAllItems().ToList();
        product = new Product();
    }

    private async Task SaveProduct()
    {
        var validationResult = await ProductValidator.ValidateAsync(product);

        if (validationResult.IsValid)
        {
            _baseProductService.CreateItem(product);
            StateHasChanged();
            await OnProductInitialized.InvokeAsync();
            CloseModal();
        }
    }

    private void CloseModal()
    {
        IsOpenCreate = false;
        IsOpenCreateChanged.InvokeAsync(false);
    }
}