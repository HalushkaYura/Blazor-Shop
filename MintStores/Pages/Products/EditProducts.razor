@using FluentValidation
@using MintStores.Core
@using MintStores.Core.Model
@inject IBaseService<Product> _baseProductService
@inject IBaseService<Brand> _baseBrandService
@inject IBaseService<Category> _baseCategoryService
@inject IValidator<Product> ProductValidator

<div class="modal fade show d-block bg-white bg-opacity-50">
    <div class="modal-dialog ">
        <div class="modal-content">

            <div class="modal-header  bg-warning " style="height: 50px;">
                <h2 class="modal-title text-center ms-0">Edit product</h2>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
            <EditForm Model="product" OnValidSubmit="SaveProduct">
            <DataAnnotationsValidator />
            <FluentValidationValidator />

            <div class="form-group">
                <label for="ProductName">Product Name:</label>
                <InputText class="form-control" id="ProductName" @bind-Value="product.ProductName" />
                @if (string.IsNullOrWhiteSpace(product.ProductName))
                {
                    <div class="text-danger">Product Name is required.</div>
                }
            </div>

            <div class="form-group">
                <label for="Price">Price:</label>
                <InputNumber class="form-control" id="Price" @bind-Value="product.Price" />
                <ValidationMessage For="@(() => product.Price)" />
                @if (product.Price <= 0)
                {
                    <div class="text-danger">Price must be greater than 0.</div>
                }
            </div>

            <div class="form-group">
                <label for="ModelYear">Model Year:</label>
                <InputNumber class="form-control" id="ModelYear" @bind-Value="product.ModelYear" />
                <ValidationMessage For="@(() => product.ModelYear)" />
                @if (product.ModelYear <= 0)
                {
                    <div class="text-danger">Model Year must be greater than 0.</div>
                }
            </div>

            <div class="form-group">
                <label for="BrandId">Brand:</label>
                <InputSelect class="form-control" id="BrandId" @bind-Value="product.BrandId">
                    @foreach (var brand in brands)
                    {
                        <option value="@brand.BrandId">@brand.BrandName</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => product.BrandId)" />
            </div>

            <div class="form-group">
                <label for="CategoryId">Category:</label>
                <InputSelect class="form-control" id="CategoryId" @bind-Value="product.CategoryId">
                    @foreach (var category in categories)
                    {
                        <option value="@category.CategoryId">@category.CategoryName</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => product.CategoryId)" />
            </div>
                    <div class="modal-footer d-flex justify-content-center" style="height: 60px;">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Сancel</button>
                        <button type="button" class="btn btn-warning" @onclick="SaveProduct">Update</button>
                    </div>
        </EditForm>

            </div>

        </div>
    </div>
</div>

@code {
    private Product product;
    private IEnumerable<Brand> brands;
    private IEnumerable<Category> categories;

    [Parameter] public int ProductId { get; set; }
    [Parameter] public bool IsOpenEdit { get; set; }
    [Parameter] public EventCallback<bool> IsOpenEditChanged { get; set; }
    [Parameter] public EventCallback<bool> OnProductInitialized { get; set; }


    protected override void OnInitialized()
    {
        product = _baseProductService.GetItemById(ProductId);
        brands = _baseBrandService.GetAllItems().ToList();
        categories = _baseCategoryService.GetAllItems().ToList();
    }
    private void CloseModal()
    {
        IsOpenEdit = false;
        IsOpenEditChanged.InvokeAsync(false);
    }
    private void SaveProduct()
    {
        var validationResult = ProductValidator.Validate(product);

        if (validationResult.IsValid)
        {
            _baseProductService.UpdateItem(ProductId, product);
            StateHasChanged();
            OnProductInitialized.InvokeAsync();
            CloseModal();
        }
    }
}
